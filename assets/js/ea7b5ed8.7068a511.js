"use strict";(self.webpackChunkx=self.webpackChunkx||[]).push([["453"],{8947:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>s,default:()=>p,contentTitle:()=>l,assets:()=>a,toc:()=>c,metadata:()=>r});var r=JSON.parse('{"id":"code-samples/multiple-components","title":"Multiple Components","description":"You might have a PLC-like device with many identical inputs/outputs.","source":"@site/docs/04-code-samples/multiple-components.md","sourceDirName":"04-code-samples","slug":"/code-samples/multiple-components","permalink":"/code-samples/multiple-components","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Code Samples","permalink":"/category/code-samples"},"next":{"title":"Multiple Devices","permalink":"/code-samples/multiple-devices"}}'),o=n(5893),i=n(65);let s={},l="Multiple Components",a={},c=[];function d(e){let t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"multiple-components",children:"Multiple Components"})}),"\n",(0,o.jsx)(t.p,{children:"You might have a PLC-like device with many identical inputs/outputs."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-yaml",children:"# PLC/.lib/plc.eta\r\n<%- \r\n  const toHex = (number, digits) => number?.toString(16)?.padStart(digits, '0');\r\n  const inputStartAddress = 0x00C0;\r\n  const outputStartAddress = 0x0070;\r\n%>\r\nuart:\r\n  tx_pin: 43\r\n  rx_pin: 44\r\n  baud_rate: 115200\r\nmodbus:\r\n  - id: mb_main\r\n    flow_control_pin: 2\r\nmodbus_controller:\r\n  - id: mbc_1\r\n    address: 0x1\r\n    modbus_id: mb_main\r\n    update_interval: 50ms\r\n\r\nbinary_sensor:\r\n<%- for (let i = 0; i < it.inputs; i++) { \r\n    const offset = Math.trunc(i/16);\r\n    const bit = i%16; \r\n%>\r\n  - platform: modbus_controller\r\n    modbus_controller_id: mbc_1\r\n    id: input_0x<%= toHex(i+1, 2) %>\r\n    register_type: holding\r\n    address: 0x<%= toHex(inputStartAddress + offset, 4) %>\r\n    bitmask: 0x<%= toHex(1 << bit, 4) %> # bit (<%= bit %>)\r\n<%- } %>\r\n\r\nswitch:\r\n<%- for (let i = 0; i < it.outputs; i++) { \r\n    const offset = Math.trunc(i/16);\r\n    const bit = i%16; \r\n%>\r\n  - platform: modbus_controller\r\n    modbus_controller_id: mbc_1\r\n    id: output_0x<%= toHex(i+1, 2) %>\r\n    register_type: holding\r\n    address: 0x<%= toHex(outputStartAddress + offset, 4) %>\r\n    bitmask: 0x<%= toHex(1 << bit, 4) %> # bit (<%= bit %>)\r\n<%_ } _%>\n"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-yaml",children:"# PLC/plc.eta\r\n<%~ include('./.lib/plc', { \r\n  outputs: 32,\r\n  inputs: 32\r\n}) %>\n"})})]})}function p(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65:function(e,t,n){n.d(t,{Z:()=>l,a:()=>s});var r=n(7294);let o={},i=r.createContext(o);function s(e){let t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);